apply plugin: 'com.android.application'

android {
    String OPENCV_DIR = '3rdparty/OpenCV3.4.1Java'

    String OPENCV_DIR_jni = OPENCV_DIR + '/sdk/native/jni'
    String OPENCV_DIR_nativelibs = OPENCV_DIR + '/sdk/native/libs'

    compileSdkVersion 27
    defaultConfig {
        applicationId "com.uco.ava.appcv"
        minSdkVersion 22
        targetSdkVersion 27
        versionCode 6
        versionName "1.6"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"


        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions -g0 -O2"
                arguments "-DOpenCV_DIR=" + OPENCV_DIR_jni
                arguments "-DVERBOSE=1 "
                arguments "-DCMAKE_BUILD_TYPE=Release"
                arguments "-DCMAKE_SHARED_LINKER_FLAGS=-Wl,--exclude-libs,libippicv.a -Wl,--exclude-libs,libippiw.a"

            }
        }
        splits {

            // Configures multiple APKs based on ABI.
            abi {

                // Enables building multiple APKs per ABI.
                enable true

                // By default all ABIs are included, so use reset() and include to specify that we only
                // want APKs for x86 and x86_64.

                // Resets the list of ABIs that Gradle should create APKs for to none.
                reset()

                // Specifies a list of ABIs that Gradle should create APKs for.
                include "armeabi-v7a", "x86"

                // Specifies that we do not want to also generate a universal APK that includes all ABIs.
                universalApk false
            }
        }

       // ndk {
        //     abiFilters 'armeabi-v7a'//,'x86'//, 'x86_64'//'
        //}
    }
    //This forces to use include the libs in the apk
    sourceSets {
        main {
            jniLibs.srcDirs = [OPENCV_DIR_nativelibs]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation project(':openCVLibrary341')
    //compile 'com.github.clans:fab:1.6.4'
    implementation 'com.github.clans:fab:1.6.4'
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a':1, x86:2, x86_64:3]

// For per-density APKs, create a similar map like this:
// ext.densityCodes = ['mdpi': 1, 'hdpi': 2, 'xhdpi': 3]

import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.
android.applicationVariants.all { variant ->

    // Assigns a different version code for each output APK
    // other than the universal APK.
    variant.outputs.each { output ->

        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
        def baseAbiVersionCode =
                // Determines the ABI for this variant and returns the mapped value.
                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
        // the following code does not override the version code for universal APKs.
        // However, because we want universal APKs to have the lowest version code,
        // this outcome is desirable.
        if (baseAbiVersionCode != null) {

            // Assigns the new version code to versionCodeOverride, which changes the version code
            // for only the output APK, not for the variant itself. Skipping this step simply
            // causes Gradle to use the value of variant.versionCode for the APK.
            output.versionCodeOverride =
                    baseAbiVersionCode * 1000 + variant.versionCode
        }
    }
}